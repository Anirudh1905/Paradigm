# -*- coding: utf-8 -*-
"""Ex 5 Logic Programming.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ex_h5obq2rBmDCQSHZABc3X9yTh3s4US

# Q2.
"""

from pyDatalog import pyDatalog

pyDatalog.create_terms('big,small,brown,black,gray,dark,X,Y')

+big('bear')
+big('elephant')
+small('cat')
+brown('bear')
+black('cat')
+gray('elephant')

dark(X)<=black(X)
dark(X)<=brown(X)

(dark(Y) & big(Y))

"""# Q3."""

pyDatalog.create_terms('mark')

mark['ram']=90
mark['raju']=45
mark['priya']=85
mark['carol']=70
mark['shyam']=80

"""## a."""

print(mark[X]==Y)

"""## b."""

print(mark[X]==80)

"""## c."""

print(mark['priya']==X)

"""## d."""

pyDatalog.create_terms('passm,grade')
passm(X)<= (X>60)

print((mark[X]==Y) & (passm(Y)))

"""## e."""

(grade[X] == 'F') <= (0 <= X)
(grade[X] == 'E') <= (50 <= X)
(grade[X] == 'D') <= (60 <= X)
(grade[X] == 'C') <= (70 <= X)
(grade[X] == 'B') <= (80 <= X)
(grade[X] == 'A') <= (90 <= X)

print(grade[40]==X)

print(grade[70]==X)

"""# Q1."""

pyDatalog.create_terms("father,cousin,brother,Z,a,b,c,d,e,f,X,Y,W,grandson,descendent")
+ father ('b','d')
+ father ('b','e')
+ father ('c','f')
+ father ('a','b')
+ father ('a','c')
brother(X, Y) <= father(Z, X) & father(Z, Y) & ~(X==Y)
cousin(X, Y) <= father(Z, X) & father(W, Y) & brother(Z, W)
grandson(X, Y) <= father(Z, X) & father(Y, Z)
descendent(X, Y) <= father(Y, X)
descendent(X, Y) <= father(Z, X) & descendent(Z, Y)
print(brother(X,Y))
print(cousin(X,Y))
print(grandson(X,Y))
print(descendent(X,Y))

"""# Q4."""

marks = {'Ram':90,'Raju':45,'Priya':85,'Carol':70,'Shyam':80}
for i in marks:
    print(i,marks.get(i))

for i in marks:
    if marks.get(i)==80:
        print(i)

print(marks.get('Priya'))

def passm(mydict):
     for i in mydict:
        if mydict.get(i)>=50:
             print(i)

passm(marks)

def findgrade(marks):
        if marks>90:
             print ('A')
        elif marks>=80 and marks<90:
             print ('B')
        elif marks>=70 and marks<80:
             print ('C')
        elif marks>=60 and marks<70:
             print ('D')
        elif marks >= 50 and marks <60:
             print('D')
        elif marks<50:
             print ('F')

findgrade(85)

"""# Q5."""

pyDatalog.create_terms('factorial, N')

factorial[N] = N*factorial[N-1]
factorial[1] = 1

print(factorial[3]==N)

